name: H4-3600

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - 'start'
#  schedule:
#    - cron: 0 20 */28 * *
  watch:
    types: [started]

env:
  RUN_VALIDATION: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on:  ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    #${{matrix.target}}
    name: 编译极路由B70
    strategy:
      fail-fast: false
      matrix:
        target: [lean-mt7621] #lean-x64,lean-ipq40xx,lean-mt7621,lean-rockchip,lienol-x64
    
    steps:
    - name: wzslrb222
      uses: actions/checkout@v2

    - name: 设置日期
      run: |
         date=$(date +%Y-%m-%d)
         echo "::set-env name=DATE::$date"
         echo -e "测试命令grep= $(grep "^#!" ./diy.sh):\c"
         echo -e "\n当前目录:$(pwd)"
         ls -l
                 
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf tree rename
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        echo "创建固件目录manpages manpages-zh"
        mkdir -p ./Firmware/
        mkdir -p ./other/
    - name: 载入设置 Settings.ini
      run: |
        /bin/bash ./init.sh
        echo "读取 Settings.ini"
        source "${GITHUB_WORKSPACE}/user/${{matrix.target}}/settings.ini"
        echo "::set-env name=REPO_URL::${REPO_URL}"
        echo "::set-env name=REPO_BRANCH::${REPO_BRANCH}"
        echo "::set-env name=UPLOAD_PACKAGES_DIR::${UPLOAD_PACKAGES_DIR}"
        echo "::set-env name=UPLOAD_TARGETS_DIR::${UPLOAD_TARGETS_DIR}"        
        echo "::set-env name=UPLOAD_FIRMWARE::${UPLOAD_FIRMWARE}"        
        echo "::set-env name=UPLOAD_TO_ARTIFACTS::${UPLOAD_TO_ARTIFACTS}"
        echo "::set-env name=UPLOAD_TO_REALEASE::${UPLOAD_TO_REALEASE}"
        echo "::set-env name=UPLOAD_TO_COWTRANSFER::${UPLOAD_TO_COWTRANSFER}"       
        echo "::set-env name=WECHAT_NOTIFICATION::${WECHAT_NOTIFICATION}"
        
    - name: 拷贝lede源代码
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        
    - name: 应用补丁
      run: | 
        echo "应用补丁……"
        if [ -n "$(ls -A "user/common/patches" 2>/dev/null)" ]; then
        (
          find "user/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi

        if [ -n "$(ls -A "user/${{matrix.target}}/patches" 2>/dev/null)" ]; then
        (
          find "user/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi

    - name: 更新 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        
    - name: 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: 自定义设置
      run: |
         cd openwrt
         mv ../user/${{matrix.target}}/config.diff .config && cd .. 
         echo "Apply files..."
         if [ -n "$(ls -A "user/common/files" 2>/dev/null)" ]; then
         cp -r -f user/common/files/* openwrt/package/base-files/files/
         fi
         if [ -n "$(ls -A "user/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -r -f user/${{matrix.target}}/files/* openwrt/package/base-files/files/
         fi
         
         #echo "查看基础文件目录"
         #ls openwrt/package/base-files/files/
         
         echo "执行 ${{matrix.target}}custom.sh"
         if [ -f "user/common/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/common/custom.sh"
         )
         fi       
         if [ -f "user/${{matrix.target}}/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/${{matrix.target}}/custom.sh"
         )
         fi
         echo "yml准备 运行 diy补丁脚本"
         cd openwrt && /bin/bash ../diy.sh
         
    - name: 下载包
      id: package
      run: |
        cd openwrt
        sync
        echo "cat feeds.conf.default"
        cat feeds.conf.default
        echo "创建差异文件defconfig"
        make defconfig
        #echo "查看没有安装的包"
        #make prereq
        sync
        #echo "查看差异文件 V=s"
        #./scripts/diffconfig.sh
        make download -j8
        #find dl -size -1024c -exec ls -l {} \; | grep "-" && find dl -size -1024c -exec rm -f {} \; && make download -j8 V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        #echo 复制_temp ../other/
        #cp -rfp /home/runner/work/_* ../other/
        sync
        #echo "先编译这个……"
        #make package/feeds/luci/luci-base/compile V=99
        echo -e "$((nproc+1)) 线程编译 2>&1 | tee -ai ../other/build.log | grep -i error"
        make -j3 > ../other/build.log || {
        echo -e "\n\n\n出错重新开始:make -j1 V=s\n\n" >> ../other/build.log
        make -j1 V=s >> ../other/build.log
        }

    - name: 压缩编译日志
      if: (!cancelled())
      run: |
        cd other
        [ ! -s build.log ] && echo "没有日志，跳过." && exit 0
        tar -cvf  build.tar build.log >/dev/null 2>&1
        gzip build.tar >/dev/null 2>&1
        ls -l
        rm -f build.log && echo "删除build.log"
        df -hT

    - name: 封装固件
      if: (!cancelled())
      run: |
          mkdir -p ./Firmware/
          echo "设置成功标志"
          ls openwrt/bin/targets/ || echo "ls targets目录失败"
          find openwrt/bin/targets/ -maxdepth 3 -type f -not -name "*kernel*" -exec cp -f {} ./Firmware/ \; || echo "好像编译失败了……"
          #echo "测试命令"
          #find openwrt/bin/targets/ -type f -not -name "*kernel*" | grep -v "/package"
          #echo "测试命令"
          #find openwrt/bin/targets/ -maxdepth 3 -type f -not -name "*kernel*"
          echo "准备……"
          #find openwrt/bin/targets/ -name "*squashfs*bin*" | xargs -i cp {} ./Firmware/
          cd openwrt
          #echo "打包差异文件及目录树"
          #./scripts/diffconfig.sh > ../Firmware/差异文件.txt
          #echo "备份目录树"
          #tree -a staging_dir/target-mipsel_24kc_musl > ../Firmware/openwrt_a.txt
          #tree -a -i -f staging_dir/target-mipsel_24kc_musl > ../Firmware/openwrt_aif.txt
          echo "备份.config"
          mv .config ../Firmware/config.txt
          cd ../Firmware/
          rename -v  's/config/差异文件/' *.buildinfo
          rename -v 's/\.buildinfo/\.txt/' *.buildinfo
          rename -v 's/.*manifest$/已安装ipk.txt/' openwrt*manifest
          rename -v "s/.*/$(TZ=CST-8 date +'%m.%d')_sysupgrade.bin/" *sysupgrade.bin
          rename -v "s/.*/$(TZ=CST-8 date +'%m.%d')_factory.bin/" *factory.bin
          grep \^CONFIG_DEFAULT_ config.txt > ./默认安装.txt
          echo "::set-env name=FIRMWARE::$PWD" && echo "设置上传目录"
          pwd
          #ls -al
          echo "分别安置factory\sysupgrade\log"

          mkdir -p ../other/
          find . -maxdepth 1 -type f -not -name "*.bin" -exec mv -f {} ../other/ \;
          [ ! -z "$(ls -A ../other/)" ] && echo "::set-env name=UPOTHER::true"
          echo "打包 ../other/"
          #cp -rfp ../openwrt/staging_dir/target-mipsel_24kc_musl/root-ramips/etc/uci-defaults ../other/ >/dev/null || echo "出错了"
          tar -cvf  other.tar ../other/ || echo "tar???????????"
          gzip other.tar || echo "gzip???????????"
          #ls -l ../other/

          mkdir -p ../factory/
          cp -f *factory.bin ../factory/ >/dev/null 2>&1
          echo "ls -l ../factory/"
          ls -l ../factory/
          [ ! -z "$(ls -A ../factory/)" ] && echo "::set-env name=UPBIN_factory::true"
          
          mkdir -p ../sysupgrade/
          cp -f *sysupgrade.bin ../sysupgrade/ >/dev/null 2>&1
          echo "ls -l ../sysupgrade/"
          ls -l ../sysupgrade/
          [ ! -z "$(ls -A ../sysupgrade/)" ] && echo "::set-env name=UPBIN_sysupgrade::true"
          sync

    - name: 上传工厂固件
      if: env.UPLOAD_FIRMWARE == 'true' && (!cancelled()) && env.UPBIN_factory == 'true'
      uses: actions/upload-artifact@main
      with:
        name: factory_${{matrix.target}}
        path: ./factory/

    - name: 上传升级固件
      if: (!cancelled()) && env.UPLOAD_FIRMWARE == 'true' && env.UPBIN_sysupgrade == 'true'
      uses: actions/upload-artifact@main
      with:
        name: sysupgrade_${{matrix.target}}
        path: ./sysupgrade/

    - name: 上传固件transfer网盘
      if: (!cancelled()) && env.UPLOAD_FIRMWARE == 'true' && env.UPOTHER == 'true'
      run: |
        echo "上传路径：${FIRMWARE}"
        ls -l ${FIRMWARE}
        echo "准备上传cow……"
        curl -fsSL git.io/file-transfer | sh >/dev/null 2>&1
        #./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} > cowtransfer.log
        #echo "::warning file=下载路径::$(cat cowtransfer.log | grep https)"
        #mv cowtransfer.log ./other/
        echo "准备上传wet……"
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} > wetransfer.log
        echo "::warning file=wet下载路径::$(cat wetransfer.log | grep https)"
        mv wetransfer.log ./other/
        
        echo "准备上传vim……"
        ./transfer vim --no-progress ${FIRMWARE} > vim.log
        cp vim.log ./other/
        echo "分析log"
        sed -r -n '/^Down|^Local/p' vim.log > 2.log
        sed -i "s/\r//g" 2.log
        sed -i "/^Local/s/.*\/\(.*\)$/fname='\1'/g" 2.log
        #sed -i '/^Local/s/.*\/\(.*\)$/fname="\1"/g' 2.log
        sed -i '/^Download/s/.*: \(.*\)/echo "::warning file=【vim】\${fname}::\1"/g' 2.log
        echo "分析完毕 cat"
        #cat 2.log
        echo "获取下载链接"
        source ./2.log
        
        echo "准备上传AirPortal……"
        ./transfer arp --no-progress ${FIRMWARE} > arp.log
        cp arp.log ./other/
        echo "分析arp.log"
        sed -r -n '/^Down|^Local/p' arp.log > 2.log
        sed -i "s/\r//g" 2.log
        #sed -i "/^Local/s/.*\/\(.*\)$/fname='\1'/g" 2.log
        sed -i '/^Local/s/.*\/\(.*\)$/fname="\1"/g' 2.log
        sed -i '/^Download/s/.*: \(.*\)/echo "::warning file=【arp】\${fname}::\1"/g' 2.log
        echo "分析完毕 cat"
        echo "获取下载链接"
        source ./2.log

        echo "准备上传文叔叔……"
        ./transfer wss -s --no-progress ${FIRMWARE} > wss.log
        cp wss.log ./other/
        echo "分析wss.log"
        sed -r -n '/^Down|^Local/p' wss.log > 2.log
        sed -i "s/\r//g" 2.log
        #sed -i "/^Local/s/.*\/\(.*\)$/fname='\1'/g" 2.log
        sed -i '/^Local/s/.*\/\(.*\)$/fname="\1"/g' 2.log
        sed -i '/^Download/s/.*: \(.*\)/echo "::warning file=【文叔叔】\${fname}::\1"/g' 2.log
        echo "分析完毕 cat"
        cat 2.log
        echo "获取下载链接"
        source ./2.log

    - name: 上传其他文件
      if: (!cancelled()) && env.UPOTHER == 'true'
      uses: actions/upload-artifact@main
      with:
        name: other_${{matrix.target}}
        path: ./other/
